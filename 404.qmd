---
pagetitle: Page Not Found | Pukar Bhandari
format: live-html
engine: knitr
webr:
  render-df: gt-interactive
  packages:
    - dplyr
    - ggplot2
    - gradethis
respect-user-color-scheme: true
theme:
  light:
    - "flatly"
    - theme.scss
  dark:
    - "darkly"
    - theme.scss
mainfont: "Poppins"
monofont: "Fira Code"
css: assets/css/index.css
include-in-header:
  - _includes/preload-fonts.html
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

<br>

<div style="text-align: center">

# {{< fa road-barrier >}}  Road Closed Ahead!  {{< fa road-barrier >}}

The page you were looking for has been affected by the recent funding cuts. 

**While we wait for the public comment period, why not test your Transportation & Data Science smarts?** It’s more fun than hitting the <a href="javascript:history.back()">back</a> button. Probably.


</div>

::: {.callout-tip}
## Welcome to the Transportation Data Science Challenge! 🚦

Complete these interactive R exercises to test your skills in transportation planning and data analysis. Each exercise builds on real-world scenarios you'll encounter as a transportation professional.
:::

----

```{webr}
#| context: setup
#| include: false

# Sample transportation data
traffic_data <- data.frame(
  location = c("Main St", "Oak Ave", "Park Rd", "First St", "Center Blvd", "Highway 101"),
  aadt = c(15000, 8500, 12000, 6800, 22000, 45000),
  speed_limit = c(35, 25, 30, 25, 45, 65),
  lanes = c(4, 2, 3, 2, 6, 8),
  accidents_2023 = c(12, 3, 8, 2, 18, 35),
  congestion_hours = c(4, 2, 3, 1, 6, 8)
)

# Bike share data
bike_data <- data.frame(
  station = paste("Station", LETTERS[1:6]),
  daily_trips = c(45, 78, 23, 56, 89, 34),
  distance_downtown_km = c(0.5, 2.1, 4.2, 1.8, 0.8, 3.5),
  bike_capacity = c(20, 30, 15, 25, 35, 20)
)

# Transit data
transit_data <- data.frame(
  route = paste0("Route ", 1:5),
  daily_riders = c(1200, 850, 2100, 650, 1800),
  route_length_miles = c(12.5, 8.2, 18.3, 6.1, 15.7),
  frequency_minutes = c(15, 20, 10, 30, 12)
)

# Level of Service data
los_data <- data.frame(
  intersection = c("A", "B", "C", "D", "E"),
  delay_seconds = c(10, 25, 45, 75, 120),
  volume = c(800, 1200, 1600, 1800, 2000),
  capacity = c(1800, 1800, 1800, 1800, 1800)
)
```

---

## 🧠 **Knowledge Test**

*Test your understanding of transportation planning fundamentals*

### Question 1: Traffic Signal Timing ⏱️

If a traffic light has a 90-second cycle and the green light lasts 60 seconds, how many cars can pass through if each car takes 3 seconds to clear the intersection?

```{webr}
#| exercise: know_1
#| completion: true
#| label: "Knowledge Question 1"
# Calculate how many cars can pass in one green phase
green_time <- 60  # seconds
time_per_car <- 3  # seconds

# Your calculation:
cars_per_cycle <- ______

cars_per_cycle
```

::: {.solution exercise="know_1"}
```{webr}
#| exercise: know_1
#| solution: true
# Calculate how many cars can pass in one green phase
green_time <- 60  # seconds
time_per_car <- 3  # seconds

# Divide green time by time per car
cars_per_cycle <- green_time / time_per_car

cars_per_cycle
```
:::

```{webr}
#| exercise: know_1
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (identical(.result, 20)) {
    pass("🎯 Perfect! 20 cars can pass through in one green cycle. This is a fundamental capacity calculation used in traffic signal timing.")
  } else if (.result > 20) {
    fail("🤔 Too many cars! Remember, each car needs 3 seconds to clear the intersection. Try dividing the green time by the time per car.")
  } else if (.result < 20) {
    fail("🚗 Not quite enough cars! How many 3-second periods fit in 60 seconds? Think: 60 ÷ 3 = ?")
  } else {
    fail("🔢 Make sure your result is a number. Check your calculation.")
  }
})
```

### Question 2: Level of Service 🚦

Calculate the volume-to-capacity (V/C) ratio for an intersection with 1,600 vehicles/hour and capacity of 1,800 vehicles/hour. What LOS category does this represent? (A-C: ≤0.8, D: 0.8-0.9, E-F: >0.9)

```{webr}
#| exercise: know_2
#| completion: true
#| label: "Knowledge Question 2"
volume <- 1600
capacity <- 1800

# Calculate V/C ratio
vc_ratio <- ______

# Determine LOS category
los_category <- ______  # Should be "A-C", "D", or "E-F"

list(vc_ratio = vc_ratio, los_category = los_category)
```

::: {.solution exercise="know_2"}
```{webr}
#| exercise: know_2
#| solution: true
volume <- 1600
capacity <- 1800

# Calculate V/C ratio
vc_ratio <- volume / capacity

# Determine LOS category based on thresholds
los_category <- if (vc_ratio <= 0.8) {
  "A-C"
} else if (vc_ratio <= 0.9) {
  "D" 
} else {
  "E-F"
}

list(vc_ratio = vc_ratio, los_category = los_category)
```
:::

```{webr}
#| exercise: know_2
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!is.list(.result) || is.null(.result$vc_ratio) || is.null(.result$los_category)) {
    fail("📋 Make sure your result is a list with both 'vc_ratio' and 'los_category' elements.")
  } else {
    vc_correct <- round(.result$vc_ratio, 3) == round(1600/1800, 3)
    los_correct <- .result$los_category == "D"
    
    if (vc_correct && los_correct) {
      pass("🎯 Excellent! V/C = 0.889 puts this intersection at LOS D. This indicates approaching unstable flow with tolerable delays.")
    } else if (!vc_correct && los_correct) {
      fail("🔢 LOS category is correct, but check your V/C calculation: volume ÷ capacity = 1600 ÷ 1800")
    } else if (vc_correct && !los_correct) {
      fail("📊 V/C ratio is correct (0.889), but check the LOS thresholds: 0.8-0.9 = Level D")
    } else {
      fail("🚦 Both calculations need work. V/C ratio = volume ÷ capacity, then check: ≤0.8=A-C, 0.8-0.9=D, >0.9=E-F")
    }
  }
})
```

### Question 3: Modal Split 🚌🚲🚗

In a city where 40% of trips are by car, 25% by transit, 20% by walking, and 15% by cycling, what percentage of non-car trips are made by transit?

```{webr}
#| exercise: know_3
#| completion: true
#| label: "Knowledge Question 3"
car_percent <- 40
transit_percent <- 25
walking_percent <- 20
cycling_percent <- 15

# Calculate percentage of non-car trips that are transit
non_car_total <- ______
transit_share_of_non_car <- ______

transit_share_of_non_car
```

::: {.solution exercise="know_3"}
```{webr}
#| exercise: know_3
#| solution: true
car_percent <- 40
transit_percent <- 25
walking_percent <- 20
cycling_percent <- 15

# Calculate percentage of non-car trips that are transit
non_car_total <- 100 - car_percent  # 60%
transit_share_of_non_car <- (transit_percent / non_car_total) * 100

transit_share_of_non_car
```
:::

```{webr}
#| exercise: know_3
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (round(.result, 1) == 41.7) {
    pass("🚌 Perfect! 41.7% of non-car trips are made by transit. This shows transit's importance in the sustainable transportation mix.")
  } else if (.result == 25) {
    fail("🤔 That's the overall transit share (25%). But what about just among non-car trips? Hint: transit % ÷ non-car total % × 100")
  } else if (round(.result, 0) == 42) {
    pass("🚌 Very close! 41.7% of non-car trips are made by transit. Your calculation method is correct!")
  } else {
    fail("📊 Remember: First find non-car total (100 - car %), then calculate: (transit %) ÷ (non-car total %) × 100")
  }
})
```

### Question 4: Trip Generation 🏠

A residential development has 200 housing units. Using ITE trip generation rate of 9.5 trips per dwelling unit per day, calculate total daily trips. If 15% occur during PM peak hour, how many PM peak trips?

```{webr}
#| exercise: know_4
#| completion: true
#| label: "Knowledge Question 4"
housing_units <- 200
trip_rate <- 9.5
pm_peak_percent <- 15

# Calculate total daily trips
total_daily_trips <- ______

# Calculate PM peak hour trips  
pm_peak_trips <- ______

list(daily = total_daily_trips, pm_peak = pm_peak_trips)
```

::: {.solution exercise="know_4"}
```{webr}
#| exercise: know_4
#| solution: true
housing_units <- 200
trip_rate <- 9.5
pm_peak_percent <- 15

# Calculate total daily trips
total_daily_trips <- housing_units * trip_rate

# Calculate PM peak hour trips
pm_peak_trips <- total_daily_trips * (pm_peak_percent / 100)

list(daily = total_daily_trips, pm_peak = pm_peak_trips)
```
:::

```{webr}
#| exercise: know_4
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!is.list(.result) || is.null(.result$daily) || is.null(.result$pm_peak)) {
    fail("📋 Make sure your result is a list with both 'daily' and 'pm_peak' elements.")
  } else {
    daily_correct <- .result$daily == 1900
    peak_correct <- .result$pm_peak == 285
    
    if (daily_correct && peak_correct) {
      pass("🏠 Excellent! 1,900 daily trips with 285 during PM peak. These are key numbers for traffic impact studies.")
    } else if (!daily_correct && peak_correct) {
      fail("🏘️ PM peak trips are correct, but check daily trips: units × trip rate = 200 × 9.5")
    } else if (daily_correct && !peak_correct) {
      fail("🕔 Daily trips correct, but check PM peak: daily trips × 15% = 1900 × 0.15")
    } else {
      fail("📊 Both calculations need work. Daily = units × rate, PM peak = daily × 15%")
    }
  }
})
```

### Question 5: Transit Frequency 🚍

A bus route operates every 12 minutes during peak hours. How many buses pass a given stop in one hour? If each bus has 40-passenger capacity and average load is 75%, what's the hourly passenger capacity past that stop?

```{webr}
#| exercise: know_5
#| completion: true
#| label: "Knowledge Question 5"
frequency_minutes <- 12
bus_capacity <- 40
load_factor <- 0.75

# Calculate buses per hour
buses_per_hour <- ______

# Calculate hourly passenger capacity
hourly_passenger_capacity <- ______

list(buses_per_hour = buses_per_hour, hourly_capacity = hourly_passenger_capacity)
```

::: {.solution exercise="know_5"}
```{webr}
#| exercise: know_5
#| solution: true
frequency_minutes <- 12
bus_capacity <- 40
load_factor <- 0.75

# Calculate buses per hour
buses_per_hour <- 60 / frequency_minutes

# Calculate hourly passenger capacity
hourly_passenger_capacity <- buses_per_hour * bus_capacity * load_factor

list(buses_per_hour = buses_per_hour, hourly_capacity = hourly_passenger_capacity)
```
:::

```{webr}
#| exercise: know_5
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!is.list(.result) || is.null(.result$buses_per_hour) || is.null(.result$hourly_capacity)) {
    fail("📋 Make sure your result is a list with both 'buses_per_hour' and 'hourly_capacity' elements.")
  } else {
    buses_correct <- .result$buses_per_hour == 5
    capacity_correct <- .result$hourly_capacity == 150
    
    if (buses_correct && capacity_correct) {
      pass("🚍 Perfect! 5 buses per hour with 150 passenger capacity. This helps determine route efficiency and passenger service levels.")
    } else if (!buses_correct && capacity_correct) {
      fail("🕒 Passenger capacity is correct, but check buses per hour: 60 minutes ÷ frequency = 60 ÷ 12")
    } else if (buses_correct && !capacity_correct) {
      fail("👥 Buses per hour correct, but check capacity: buses × capacity × load factor = 5 × 40 × 0.75")
    } else {
      fail("🚌 Both calculations need work. Buses/hour = 60 ÷ frequency, Capacity = buses × seats × load factor")
    }
  }
})
```

---

## 🚀 **Skills Test**

*Put your R and dplyr skills to work with real transportation datasets*

### Question 1: High-Traffic Location Analysis 📊

Using the `traffic_data` dataset, filter for locations with AADT > 15,000 and count how many locations meet this criteria.

```{webr}
#| context: setup
#| include: false
library(dplyr)
```

```{webr}
#| autorun: true
#| show-solutions: false
#| label: "Traffic Data"
# First, let's see the data
traffic_data
```

```{webr}
#| exercise: skill_1
#| completion: true
#| label: "Skill Question 1"
# Filter for high-traffic locations and count them
high_traffic <- traffic_data |>
  filter(______)

# Count the results
count_high_traffic <- ______

count_high_traffic
```

::: {.solution exercise="skill_1"}
```{webr}
#| exercise: skill_1
#| solution: true
# Filter for high-traffic locations and count them
high_traffic <- traffic_data |>
  filter(aadt > 15000)

# Count the results
count_high_traffic <- nrow(high_traffic)

count_high_traffic
```
:::

```{webr}
#| exercise: skill_1
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!exists("high_traffic") || !exists("count_high_traffic")) {
    fail("📊 Make sure to create both 'high_traffic' and 'count_high_traffic' variables.")
  } else {
    # Check the filtering
    expected_high_traffic <- traffic_data |> filter(aadt > 15000)
    filter_correct <- identical(high_traffic, expected_high_traffic)
    count_correct <- count_high_traffic == nrow(expected_high_traffic)
    
    if (filter_correct && count_correct) {
      pass("🎯 Perfect! You correctly identified 3 high-traffic locations (Main St, Center Blvd, Highway 101) with AADT > 15,000. This type of analysis helps prioritize infrastructure investments.")
    } else if (!filter_correct && count_correct) {
      fail("🔍 Count is correct, but check your filtering condition. You should use: filter(aadt > 15000)")
    } else if (filter_correct && !count_correct) {
      fail("📋 Filtering is correct, but check your count calculation. Use nrow() to count the filtered results.")
    } else {
      fail("🚗 Check both your filter condition (aadt > 15000) and count method (use nrow()).")
    }
  }
})
```

### Question 2: Safety Rate Calculation 🔍

Calculate the accident rate per 1,000 AADT for each location. Create a new column called `accident_rate` and arrange by highest rate.

```{webr}
#| exercise: skill_2
#| completion: true
#| label: "Skill Question 2"
# Calculate accident rates and arrange
safety_analysis <- traffic_data |>
  mutate(accident_rate = ______) |>
  arrange(______)

# Show the results
safety_analysis
```

::: {.solution exercise="skill_2"}
```{webr}
#| exercise: skill_2
#| solution: true
# Calculate accident rates and arrange
safety_analysis <- traffic_data |>
  mutate(accident_rate = (accidents_2023 / aadt) * 1000) |>
  arrange(desc(accident_rate))

# Show the results
safety_analysis
```
:::

```{webr}
#| exercise: skill_2
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!exists("safety_analysis")) {
    fail("📊 Make sure to create the 'safety_analysis' variable.")
  } else {
    expected_result <- traffic_data |>
      mutate(accident_rate = (accidents_2023 / aadt) * 1000) |>
      arrange(desc(accident_rate))
    
    # Check if accident_rate column exists
    if (!"accident_rate" %in% names(safety_analysis)) {
      fail("📋 Make sure to create the 'accident_rate' column using mutate().")
    } else if (!identical(safety_analysis, expected_result)) {
      # Check if just the sorting is wrong
      unsorted_check <- traffic_data |>
        mutate(accident_rate = (accidents_2023 / aadt) * 1000)
      
      if (identical(safety_analysis, unsorted_check)) {
        fail("📈 Accident rate calculation is correct, but you need to arrange by desc(accident_rate) to show highest rates first.")
      } else {
        fail("🔢 Check your accident rate calculation: (accidents_2023 / aadt) * 1000")
      }
    } else {
      pass("🎯 Excellent! You've calculated accident rates per 1,000 AADT and sorted by highest risk. Park Rd has the highest rate at 0.67 accidents per 1,000 AADT, making it a priority for safety improvements.")
    }
  }
})
```

### Question 3: Transit Efficiency Analysis 🚌

Calculate riders per mile for each transit route and identify the most efficient route (highest riders per mile).

```{webr}
#| autorun: true
#| show-solutions: false
#| label: "Transit Data"
# Look at transit data first
transit_data
```

```{webr}
#| exercise: skill_3
#| completion: true
#| label: "Skill Question 3"
# Calculate efficiency and find the best route
transit_efficiency <- transit_data |>
  mutate(riders_per_mile = ______) |>
  arrange(______)

# Get the most efficient route name
most_efficient <- transit_efficiency |>
  slice(1) |>
  pull(______)

most_efficient
```

::: {.solution exercise="skill_3"}
```{webr}
#| exercise: skill_3
#| solution: true
# Calculate efficiency and find the best route
transit_efficiency <- transit_data |>
  mutate(riders_per_mile = daily_riders / route_length_miles) |>
  arrange(desc(riders_per_mile))

# Get the most efficient route name
most_efficient <- transit_efficiency |>
  slice(1) |>
  pull(route)

most_efficient
```
:::

```{webr}
#| exercise: skill_3
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!exists("transit_efficiency") || !exists("most_efficient")) {
    fail("📊 Make sure to create both 'transit_efficiency' and 'most_efficient' variables.")
  } else {
    expected_efficiency <- transit_data |>
      mutate(riders_per_mile = daily_riders / route_length_miles) |>
      arrange(desc(riders_per_mile))
    expected_most_efficient <- expected_efficiency |> slice(1) |> pull(route)
    
    efficiency_correct <- identical(transit_efficiency, expected_efficiency)
    route_correct <- identical(most_efficient, expected_most_efficient)
    
    if (efficiency_correct && route_correct) {
      pass("🎯 Perfect! Route 3 is the most efficient with 114.8 riders per mile. This analysis helps transit agencies optimize route planning and resource allocation.")
    } else if (!efficiency_correct && route_correct) {
      fail("🚌 Most efficient route is correct, but check your efficiency calculation: daily_riders / route_length_miles")
    } else if (efficiency_correct && !route_correct) {
      fail("📊 Efficiency calculation is correct, but check how you're extracting the most efficient route name using pull(route)")
    } else {
      fail("🚍 Check both your efficiency calculation (riders ÷ miles) and route extraction (slice(1) |> pull(route))")
    }
  }
})
```

### Question 4: Bike Share Visualization 📈

Create a scatter plot showing the relationship between distance from downtown and daily trips for bike share stations. Add a smooth trend line.

```{webr}
#| context: setup
#| include: false
library(ggplot2)
```

```{webr}
#| autorun: true
#| show-solutions: false
#| label: "Bike Data"
# Look at bike data first
bike_data
```

```{webr}
#| exercise: skill_4
#| completion: true
#| label: "Skill Question 4"
# Create the bike share analysis plot
bike_plot <- ggplot(bike_data, aes(x = ______, y = ______)) +
  geom_point(size = 3, alpha = 0.7, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(
    title = "Bike Share Usage vs Distance from Downtown",
    x = "Distance from Downtown (km)",
    y = "Daily Trips"
  ) +
  theme_minimal()

bike_plot
```

::: {.solution exercise="skill_4"}
```{webr}
#| exercise: skill_4
#| solution: true
# Create the bike share analysis plot
bike_plot <- ggplot(bike_data, aes(x = distance_downtown_km, y = daily_trips)) +
  geom_point(size = 3, alpha = 0.7, color = "steelblue") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(
    title = "Bike Share Usage vs Distance from Downtown",
    x = "Distance from Downtown (km)",
    y = "Daily Trips"
  ) +
  theme_minimal()

bike_plot
```
:::

```{webr}
#| exercise: skill_4
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to create the plot.")
  } else if (!exists("bike_plot")) {
    fail("📊 Make sure to create the 'bike_plot' variable.")
  } else if (!inherits(bike_plot, "ggplot")) {
    fail("📈 Make sure 'bike_plot' is a ggplot object.")
  } else {
    # Check if the basic aesthetics are correct
    aes_data <- bike_plot$mapping
    x_correct <- "distance_downtown_km" %in% as.character(aes_data$x)
    y_correct <- "daily_trips" %in% as.character(aes_data$y)
    
    if (x_correct && y_correct) {
      pass("🎯 Excellent visualization! Your plot shows the relationship between distance from downtown and bike share usage. The trend line reveals that stations closer to downtown tend to have higher usage - a key insight for bike share planning.")
    } else if (!x_correct && y_correct) {
      fail("📊 Y-axis (daily_trips) is correct, but check your x-axis mapping: use distance_downtown_km")
    } else if (x_correct && !y_correct) {
      fail("📊 X-axis (distance_downtown_km) is correct, but check your y-axis mapping: use daily_trips")
    } else {
      fail("🚲 Check your aesthetic mappings: x = distance_downtown_km, y = daily_trips")
    }
  }
})
```

### Question 5: Comprehensive Performance Summary 🏆

Create a summary table showing for each location: total daily volume, accidents per 1000 vehicles, and congestion level (Low: <3hrs, Medium: 3-5hrs, High: >5hrs).

```{webr}
#| exercise: skill_5
#| completion: true
#| label: "Skill Question 5"
# Create comprehensive performance summary
performance_summary <- traffic_data |>
  mutate(
    daily_volume = ______,
    accidents_per_1000 = ______,
    congestion_level = case_when(
      ______ < 3 ~ "Low",
      ______ <= 5 ~ "Medium",
      TRUE ~ "High"
    )
  ) |>
  select(location, daily_volume, accidents_per_1000, congestion_level)

performance_summary
```

::: {.solution exercise="skill_5"}
```{webr}
#| exercise: skill_5
#| solution: true
# Create comprehensive performance summary
performance_summary <- traffic_data |>
  mutate(
    daily_volume = aadt,
    accidents_per_1000 = (accidents_2023 / aadt) * 1000,
    congestion_level = case_when(
      congestion_hours < 3 ~ "Low",
      congestion_hours <= 5 ~ "Medium", 
      TRUE ~ "High"
    )
  ) |>
  select(location, daily_volume, accidents_per_1000, congestion_level)

performance_summary
```
:::

```{webr}
#| exercise: skill_5
#| check: true
gradethis::grade_this({
  if (missing(.result) || is.null(.result)) {
    fail("🚫 Please run your code to get a result.")
  } else if (!exists("performance_summary")) {
    fail("📊 Make sure to create the 'performance_summary' variable.")
  } else {
    expected_result <- traffic_data |>
      mutate(
        daily_volume = aadt,
        accidents_per_1000 = (accidents_2023 / aadt) * 1000,
        congestion_level = case_when(
          congestion_hours < 3 ~ "Low",
          congestion_hours <= 5 ~ "Medium", 
          TRUE ~ "High"
        )
      ) |>
      select(location, daily_volume, accidents_per_1000, congestion_level)
    
    # Check column names
    expected_cols <- c("location", "daily_volume", "accidents_per_1000", "congestion_level")
    has_correct_cols <- all(expected_cols %in% names(performance_summary))
    
    if (!has_correct_cols) {
      missing_cols <- setdiff(expected_cols, names(performance_summary))
      fail(paste("📋 Missing columns:", paste(missing_cols, collapse = ", ")))
    } else if (identical(performance_summary, expected_result)) {
      pass("🎯 Outstanding! You've created a comprehensive performance dashboard showing volume, safety rates, and congestion levels. This type of integrated analysis is essential for transportation planning and helps identify priority locations for improvements.")
    } else {
      # Check individual components
      daily_vol_correct <- identical(performance_summary$daily_volume, expected_result$daily_volume)
      accidents_correct <- all(abs(performance_summary$accidents_per_1000 - expected_result$accidents_per_1000) < 0.001)
      congestion_correct <- identical(performance_summary$congestion_level, expected_result$congestion_level)
      
      if (!daily_vol_correct) {
        fail("📊 Check daily_volume calculation: should be the same as aadt")
      } else if (!accidents_correct) {
        fail("🔢 Check accidents_per_1000 calculation: (accidents_2023 / aadt) * 1000")
      } else if (!congestion_correct) {
        fail("🚦 Check congestion_level case_when logic: <3='Low', <=5='Medium', >5='High'")
      } else {
        fail("📋 Almost there! Check your mutate and select statements carefully.")
      }
    }
  }
})
```

---

::: {.callout-success}
## 🎯 Quiz Complete!
**Congratulations, You are now a Transportation Data Scientist!** 🏆
:::

*P.S. - If you got this far, you're definitely not lost anymore. You're a certified Transportation Data Scientist! 🎯*

---
*Built with [Quarto Live](https://r-wasm.github.io/quarto-live/) and [WebR](https://docs.r-wasm.org/webr/latest/)*

